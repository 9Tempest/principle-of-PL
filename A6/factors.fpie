class Main extends Object {
    main() {
        (new Factorizer(12)).factorize()
    }
}

class Factorizer extends Object {
    value;

    factorize() {
        this.factorFactory(2)
    }

    factorFactory(from) {
        if (from < this.value) (
            // Spawn a factorizer process
            spawn FactorFactory(ch) .
            send ch(from) .
            send ch(this.value) .
            this.factorFactory(from + 1)
        ) else 0
    }
}

class Process extends Object {
    ch;

    main() {
        this.go(this.ch)
    }
}

class FactorFactory extends Process {
    go(ch) {
        // Main will send us a possible factor...
        receive ch(n) .

        // And the value we're factorizing
        receive ch(value) .

        // Just send them along to another process
        spawn FactorProc(ch) .
        send ch(n) .
        send ch(value) .
        0
    }
}

class FactorProc extends Process {
    go(ch) {
        // Main will send us a possible factor...
        receive ch(n) .

        // And the value we're factorizing
        receive ch(value) .

        // Check it
        this.check(n, value)
    }

    check(n, value) {
        if ((new Divider(n)).divides(value) = 0) (
            // Does not divide
            0
        ) else (
            // It's a factor!
            print n
        )
    }
}

class Divider extends Object {
    n;

    divides(m) {
        if (m = 0) (
            // Everything divides 0
            1

        ) else (
            if (m < 0) (
                // We passed it
                0

            ) else (
                // Take away another n
                this.divides(m + -this.n)

            )
        )
    }
}
